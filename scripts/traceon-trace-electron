#! /bin/env python3

import argparse

import matplotlib.pyplot as plt
import numpy as np
from math import *

import traceon.geometry as G
import traceon.tracing as T
import traceon.solver as solver

parser = argparse.ArgumentParser(prog='traceon-trace-electron', description='Trace a single electron in the prescribed geometry')
parser.add_argument('--geometry', required=True, help='Geometry file')
parser.add_argument('--voltages', type=str, nargs='+', required=True, help='Voltages on electrodes')
parser.add_argument('--start', type=float, required=True, help='Start position of electron')
parser.add_argument('--angles', type=float, required=True, nargs='+', help='Starting angle of electrons')
parser.add_argument('--end', type=float, required=True, help='End position of electron')
args = parser.parse_args()

geom = G.Geometry.read(args.geometry)
mesh = geom.mesh

assert args.voltages is None or len(args.voltages) % 2 == 0

electrodes = args.voltages[0::2]
lines, charges, field = solver.field_function_superposition_mesh(geom, *electrodes)

energy = 1000
voltages = tuple(energy*float(v) for v in args.voltages[1::2])

angles = np.array(args.angles)
tracer = T.PlaneTracer(field, args.start, args.end)

zmax = max(abs(args.start), abs(args.end))

delta_r = []

plt.figure()

for a in angles:
    vel = T.velocity_vec(energy, a, direction=args.start<0)
    pos = T.trace_particle(np.array([0.0, args.start]), vel, field, 10, -zmax, zmax, args=voltages)
    plt.plot(pos[:, 1], pos[:, 0])
    delta_r.append(T.plane_intersection(pos, args.end)[0])


plt.title('Electron traces')
plt.ylabel('r (mm)')
plt.xlabel('z (mm)')

plt.figure()
plt.plot(1000*angles, delta_r)
plt.xlabel('Angles (mrad)')
plt.ylabel('Î”r (mm)')
plt.show()




